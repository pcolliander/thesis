{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# You as a language model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Go to http://www.menti.com and use the code **`61 48 82`**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### To run these slides:\n",
    "\n",
    "````bash\n",
    "# opens the runable notebook\n",
    "$ jupyter notebook tnteval.ipynb\n",
    "\n",
    "# serves the notebook as HTML slide show\n",
    "$ jupyter nbconvert tnteval.ipynb --to slides --post serve\n",
    "````\n",
    "\n",
    "(Provided you have Python installed. I use Anaconda: https://www.continuum.io/downloads)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Part-of-speech tagger evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Preliminaries\n",
    "\n",
    "We assume the taggers are already trained, and the test sets tagged."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "#### Train\n",
    "\n",
    "````bash\n",
    "for lang in cs de en fr hi; do \n",
    "    ./tnt/tnt-para -o models/${lang} data/${lang}.train\n",
    "done\n",
    "````\n",
    "\n",
    "#### Run\n",
    "\n",
    "````bash\n",
    "for lang in cs de en fr hi; do \n",
    "    ./tnt/tnt models/${lang} data/${lang}.test > data/${lang}.test.tagged\n",
    "done\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "We typicall evaluate part-of-speech (POS) taggers for:\n",
    "\n",
    "1. overall accuracy\n",
    "2. accuracy on known vs. unknown words with respect to training data\n",
    "3. precision and recall on different POS tags\n",
    "4. speed"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Datasets\n",
    "\n",
    "Here, we work with five languages: Czech, English, French, German, and Hindi.\n",
    "\n",
    "Each language bundles three files: `LANG.{train|test|test.tagged}`.\n",
    "\n",
    "They respectively contain the training data, manually annotated test data, and tagged test set data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Reading the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "def load_tagged_file(filename):\n",
    "    \"\"\"\n",
    "    Reads the part-of-speech-tagged data in \"word[\\t]tag[\\n]\" format\n",
    "    as a list of sentences, which are in turn lists of <word, tag> pairs.\n",
    "    \"\"\"\n",
    "    unique_words = set()\n",
    "    sentences = []\n",
    "    current = []\n",
    "    with open(filename) as file:\n",
    "        for line in file:\n",
    "            line = line. strip()\n",
    "            if line:\n",
    "                word, tag = line.split(\"\\t\")\n",
    "                current.append((word, tag))\n",
    "                unique_words.add(word)\n",
    "            else:  # empty line is sentence delimiter\n",
    "                sentences.append(current)\n",
    "                current = []\n",
    "    return sentences, unique_words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "langs = [\"cs\", \"de\", \"en\", \"fr\", \"hi\"]\n",
    "data = {}\n",
    "for lang in langs:\n",
    "    training, lexicon = load_tagged_file(\"data/{}.train\".format(lang))\n",
    "    test, _ = load_tagged_file(\"data/{}.test\".format(lang))\n",
    "    tagged, _ = load_tagged_file(\"data/{}.test.tagged\".format(lang))\n",
    "    data[lang] = (lexicon, training, test, tagged)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Some basic stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lang\t#unique\t#train\t#test\t#tagged\n",
      "hi\t14896\t211520\t35430\t35430\n",
      "fr\t33434\t244279\t7018\t7018\n",
      "de\t39037\t190189\t16268\t16268\n",
      "en\t17476\t163559\t25096\t25096\n",
      "cs\t40396\t172784\t173920\t173920\n"
     ]
    }
   ],
   "source": [
    "print(\"lang\\t#unique\\t#train\\t#test\\t#tagged\")\n",
    "\n",
    "for lang, datasets in data.items():\n",
    "    unique_train = len(datasets[0])\n",
    "    words_train = sum([len(sentence) for sentence in datasets[1]])\n",
    "    words_test = sum([len(sentence) for sentence in datasets[2]])\n",
    "    words_tagged = sum([len(sentence) for sentence in datasets[3]])\n",
    "    print(\"{:2}\\t{}\\t{}\\t{}\\t{}\".format(lang, \n",
    "                                        unique_train, \n",
    "                                        words_train, \n",
    "                                        words_test, \n",
    "                                        words_tagged))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Calculating the accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "We define POS tagging accuracy as:\n",
    "\n",
    "$$\\mathrm{accuracy}=\\frac{\\mathrm{number~of~words~with~correct~POS~tag}}{\\mathrm{total~number~of~words}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "def get_accuracy(s_data, g_data):\n",
    "    \"\"\"\n",
    "    Caluclates POS tagging accuracy with respect to gold data.\n",
    "    \"\"\"\n",
    "    total = 0\n",
    "    correct = 0\n",
    "    for s_sent, g_sent in zip(s_data, g_data):\n",
    "        for (_, s_tag), (_, g_tag) in zip(s_sent, g_sent):\n",
    "            total += 1\n",
    "            if s_tag == g_tag:\n",
    "                correct += 1\n",
    "    return correct/total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "First, we get all the accuracies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {
    "collapsed": false,
    "scrolled": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "accuracies = {lang:get_accuracy(data[lang][2], data[lang][3]) for lang in langs}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cs': 0.9680945262189512,\n",
       " 'de': 0.9245758544381608,\n",
       " 'en': 0.9251673573477845,\n",
       " 'fr': 0.9516956397834141,\n",
       " 'hi': 0.9434377646062658}"
      ]
     },
     "execution_count": 497,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Then, we plot them into a bar chart."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "env: LC_ALL=\"en_US.UTF-8\"\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12c59d470>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%env LC_ALL=\"en_US.UTF-8\"\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "values = np.array(list(accuracies.values()))*100\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(len(langs)), values, align=\"center\", color=\"lime\")\n",
    "plt.xlim(-1,5)\n",
    "plt.ylim(90,98)\n",
    "ax.set_xticklabels([\"\"] + langs)\n",
    "ax.set_xlabel(\"language\")\n",
    "ax.set_ylabel(\"accuracy (%)\")\n",
    "\n",
    "for i, v in enumerate(values):\n",
    "    ax.text(i-0.25, v+0.1, \"{:.2f}\".format(v))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Or, a more honest bar chart..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAhoAAAFyCAYAAACz9nOMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzt3XmYXGWZ9/Hvnc1skrBoIBmBsEgSHYQkyEjYYWRxWBwh\nEkaioIMMshhmCAQQkTDAIEMAEfGVF1DACL6DQiISdggMAmYzmsgWlrAKAoEkkPV+/6hK7O50d7or\ndbpTne/Hq6+ues5Tp+5z6Fi/es5zzonMRJIkqQid2rsASZLUcRk0JElSYQwakiSpMAYNSZJUGIOG\nJEkqjEFDkiQVxqAhSZIKY9CQJEmF6dLeBbSXiNgUOAB4AfiwfauRJKmmdAe2BqZk5l+b67jBBg1K\nIePm9i5CkqQa9i/Az5vrsCEHjRcAbrrpJgYPHtzOpdSWMWPGMGHChPYuo6a4zyrjfms991ll3G+t\nM3fuXL7yla9A+bO0ORty0PgQYPDgwQwdOrS9a6kpffr0cZ+1kvusMu631nOfVcb9VrG1Tj1wMqgk\nSSqMQUOSJBXGoCFJkgpj0FCrjRo1qr1LqDnus8q431rPfVYZ91txIjPbu4Z2ERFDgWnTpk1zApAk\nSa0wffp0hg0bBjAsM6c319cRDUmSVJj1ImhExB4RcUdEvBIRKyPi0Eb6nB8Rr0bE4oi4JyK2a7D8\nIxHxw4h4KyLej4j/FxEfb7utkCRJDa0XQQPoBcwETgTWOJYTEWcAJwHHA58FFgFTIqJbnW6XA18A\nvgTsCfQH/qfYsiVJUnPWi6CRmXdl5rmZeTsQjXQ5FRifmZMz84/AaEpB4nCAiNgIOA4Yk5kPZeYM\n4FhgRER8tm22QpLU1hYuXMi3v/1ttt56a3r27Mnuu+/O73//+3p95s6dy2GHHUbfvn3p3bs3u+66\nKy+//HKz67388ssZNGgQPXv2ZMstt+S0005jyZIlq5dPnTqVQw89lAEDBtCpUyfuuOOOQravI1gv\ngkZzImIgsDlw36q2zHwPeBz4XLlpOKWrnNbt8xTwUp0+kqQO5utf/zr33XcfN998M3/84x/5x3/8\nR/bff39ee+01AJ577jn22GMPhgwZwsMPP8zs2bP5zne+Q/fu3Ztc589//nPGjRvH9773Pf785z9z\n3XXXceutt3L22Wev7rNo0SJ22mknrr76aiIa+36sVWrhEuSbUzqc8kaD9jfKywD6AUvLAaSpPpKk\nDuTDDz/ktttuY9KkSYwYMQKA7373u0yaNIkf/ehHnH/++Zx99tl84Qtf4KKLLlr9uoEDBza73sce\ne4zdd9+dL3/5ywBsueWWHHXUUTzxxBOr+xx44IEceOCBAGyoZ2+2VC0EjUKNGTOGPn361GsbNWqU\n51RL0npu+fLlrFixgo985CP12nv06MEjjzxCZnLnnXcyduxYDjzwQGbMmMHAgQMZN24chx12WJPr\n3W233bj55pt58skn2WWXXZg3bx533nknX/3qV4vepPXSxIkTmThxYr22BQsWtHwFmble/QArgUPr\nPB9YbtuxQb8HgQnlx/sAK4CNGvR5ATi1ifcZCuS0adNSklSbdtttt9xnn33y1VdfzRUrVuSNN96Y\nnTt3zkGDBuXrr7+eEZG9e/fOK664ImfNmpUXX3xxdurUKR9++OFm13vllVdmt27dsmvXrtmpU6c8\n8cQTm+wbEXn77bdXe9PWa9OmTUtKRxuG5lo+19f7ORqZ+TzwOrDfqrby5M9dgf8tN00DljfoswOw\nJfBYmxWrDmltk82OPfZYOnXqVO/n4IMPbnadc+bM4YgjjmDgwIF06tSJK6+8co0+q5Y1/Dn55JOr\nvo1SrbrpppvITAYMGED37t256qqrOProo+nUqRMrV64E4PDDD+eUU05hxx135IwzzuCf/umfuOaa\na5pc54MPPsiFF17INddcw4wZM7jtttuYPHkyF1xwQVttVoeyXhw6iYhewHb87YyTbSLiM8DbmTmf\n0qmr50TEs5RGKcYDLwO3Q2lyaET8X+CyiHgHeB+4Eng0M59AWgdf//rXmTNnDjfffDNbbLEFN954\nI/vvvz9z585liy22AOCggw7ihhtuWH2stuFQbkOLFy9m2223ZeTIkYwZM6bRPr///e9ZsWLF6uez\nZ8/m85//PCNHjqzSlkm1b+DAgTzwwAN88MEHvPfee/Tr14+jjjqKbbbZhs0224wuXbowePDgeq8Z\nPHgwjz76aJPrPPfccznmmGM49thjAfjUpz7FwoUL+eY3v8k555xT6PZ0ROtF0KB01sgDlIZhEvjv\ncvtPgeMy85KI6An8GOgLTAUOysylddYxhtLhk/8HfAS4C/hW25Svjqolk82gFCw+9rGPtXi9w4cP\nZ/jw4QCcccYZjfbZdNNN6z2fNGkS2267LXvssUclmyJ1aD169KBHjx688847TJkyhUsvvZSuXbuy\nyy678NRTT9Xr+/TTT7PVVls1ua7FixfTpUv9j8dOnUoHADLTs0xaab04dJKla190yszODX6Oq9Pn\nvMzsn5k9M/OAzHy2wTqWZObJmblZZn40M4/MzL+0/dasv1pyvvkqJ5xwQpND+nX96le/YpdddmHj\njTemd+/e7Lzzztx0001N9r/44ovp1KkTp5122jptS1tZ22SzVR588EH69evHoEGDOPHEE3n77ber\nWseyZcu4+eab+frXv17V9Uq17u6772bKlCm88MIL3HPPPey7774MGTKEr33tawCcfvrp3HLLLVx7\n7bU899xzXHXVVUyePJlvfetv30O/+tWvctZZZ61+fsghh3D11Vdzyy23rF7vueeey6GHHro6ZCxa\ntIhZs2Yxc+ZMAObNm8esWbOYP39+2218rVjbJI6O+sMGOBl05MiR+elPfzofeeSRfO655/K8887L\nPn365Kuvvlqv32233ZY77bRT/t3f/V1eccUVza7zoYceyl//+tf55z//OefNm5dXXHFFdunSJe++\n++41+j7xxBM5cODA3GmnnXLMmDFV3bYiNTfZLDPzlltuyUmTJuUf//jHvP3223PIkCG566675sqV\nK1u0/q233nqt+/mWW27Jrl275muvvbbO2yN1JLfeemtuu+222b179+zfv3+ecsop+d5779Xrc/31\n1+f222+fPXv2zJ133jknTZpUb/k+++yTxx577OrnK1asyPPPP3/1a7baaqs8+eSTc8GCBav7PPjg\ngxkR2alTp3o/ddfTkbVmMmi7f+C318+GFjQ++OCD7NKlS/72t7+t1z5s2LD8zne+s/r5yy+/nJ/4\nxCdyzpw5LfoAbMzQoUPz3HPPrdf2/vvv5yc/+cm87777cu+9966poDFv3rzce++9MyKya9euueuu\nu+YxxxyTQ4YMabJ/ROT999/fovW3ZD8fcMABeeihh7a6dkkqQoc660TV0ZJDAJnJ6NGjGTt27BqT\np1rqvvvu4+mnn2avvfaq1/6tb32LQw45hH333beyDWhHqyabLVq0iPnz5/O73/2OpUuXss022zTZ\nf7PNNuPZZ59tdHlrvfTSS9x7773867/+a1XWJ0ltaX2ZDKqC9e7dm8997nOMHz+eQYMG0a9fP37+\n85/z2GOPsf322wOl+RPdunXjpJNOatW633vvPQYMGMCSJUvo0qULV199db1A8Ytf/IKZM2c2OR+k\nVjQ22awxL7/8Mn/9619Xn5Gyrq677jr69eu31lNmpVr30ksv8dZbb7V3GW1us802Y8stt2zvMoqz\ntiGPjvrDBnboJLP5QwDTpk3LzTffvN4cgJYeOlm5cmU+99xzOWvWrLzsssuyb9+++dBDD2Vm5vz5\n87Nfv345e/bs1f1r7dDJlClT8q677srnn38+77777txpp51yt912y+XLl+fChQvz9NNPz9/97nf5\nwgsv5L333pvDhg3LQYMG5dKlS1evY/To0Tlu3LjVz5cuXZozZ87MGTNmZP/+/XPs2LE5c+bMfPbZ\nZ+u998qVK3OrrbbKs846q822txref//9PPXUU3OrrbbKHj165IgRI/LJJ5/MzMxly5bl2LFj8+//\n/u+zV69e2b9//xw9evQac4WaM3HixIyI/OIXv7jGsldeeSW/8pWv5Kabbpo9evTIHXfcsWb+nRex\n32644YbVcwkiIiMie/ToUa/PhRdemLvsskt+9KMfzY9//ON5+OGH51NPPVXYdjbmxRdfzO49u68a\njt+gfrr37J4vvvhim+7vddWaQyeOaGxAmjvffOrUqbz55pt84hOfWN1/xYoVnHbaaVx++eXMmzev\nyfVGxOrDCDvuuCNz5szhoosuYs8992TatGm8+eabDB06dFXAY8WKFTz88MNcddVVLFmyZL0/VWzB\nggWMGzeOV155hU022YQjjjiCCy64gM6dO9O5c2f+8Ic/8LOf/Yx3332X/v37c8ABB3D++efTtWvX\n1euYP38+nTt3Xv381VdfZeedd1697ZdeeimXXnope+21F/fff//qfvfeey/z589ffT5/rWju2iO9\nevVi5syZfPe732XHHXfknXfe4ZRTTuGwww6rdy+Jprzwwgucfvrp7Lnnnmsse/fddxkxYgT77bcf\nU6ZMYbPNNuOZZ55h4403LmIzq66o/danTx+efvrp1f8GG/6bmzp1KieffDLDhw9n+fLljBs3js9/\n/vPMnTuXHj16FLa9db311lt8uPhDuAmo7MhtbZoLH37lQ956662OO6qxtiTSUX/YAEc0Gnr77bez\nb9++ee211+bbb7+df/rTn+r9DBgwIMeNG5dPP/10q9Z73HHH5T777JOZmQsXLlxjvbvsskuOHj06\n58yZU8RmqZ21dOJxXU8++WR26tQp58+f3+y6V6xYkSNGjMjrrrsuv/a1r60xonHGGWfknnvuuW4b\n0E6K2m833HBDbrzxxq2q5c0338yIyKlTp7bqdeti9TfkaeQG9b9ppVGNWvssckRDjbr77rvJTHbY\nYQeeeeYZxo4du/p8886dO6/xra9r165svvnmq+dwQOl88wEDBnDhhRcCpXkdw4cPZ9ttt2XJkiX8\n5je/4aabblp9ed9evXoxZMiQeuvt1asXm266acUTTrV+a+m1R+p69913iQj69u3b7Lq/973v0a9f\nP4499lgefvjhNZZPmjSJAw88kJEjR/LQQw8xYMAATjzxRL7xjW9UvkFtpMj9tnDhQrbeemtWrlzJ\n0KFDufDCC9f4d9nYejfZZJPWb4jUgEFjA9LcIYDGNHZIo+EhgEWLFvGtb32Ll19+mR49ejBo0CBu\nvvlmjjjiiCbraK9DJU40axstmXhc15IlSzjzzDM5+uij6d27d5PrfeSRR7j++uuZNWtWk33mzZvH\nj370I/793/+ds88+myeeeIJTTjmFj3zkIxxzzDFV2b6iFLXfdthhB6677jp23HFHFixYwPe//312\n22035syZQ//+/dfon5l8+9vfZvfdd282jEgttrYhj476g4dONihONGvbiWYtvfbIsmXL8pBDDsnh\nw4fn+++/3+T63n///Rw4cGDeddddq9saO3TSrVu33H333eu1nXLKKbnbbrtVYauKV+391phly5bl\ndtttt8a1blY54YQTcuDAga2anFsNHjqprc8iD51sAPx23jpONGvbiWbNTTxeZfny5Rx55JHMnz+f\n+++/v9lv5c899xwvvvgihxxyyKovCqvvzNmtWzeeeuopBg4cyBZbbNHoDbRuu+22Aray+qq93xrT\npUsXdt5550av83LSSSdx5513MnXq1Kqdni0ZNGrQSy+9xA6Ddyh9cG5guvfszlNzn6r8Q3MwpbEs\ntYmmrj2y6sNy3rx5PPDAA2s9K2Tw4MHMnj27XtvZZ5/NwoULufLKK1efLTVixIg1bqD11FNPNXsD\nrfVRtfZbY1auXMns2bP5whe+UK/9pJNO4vbbb+ehhx7quGc/qF0YNGqQ38478GlgHURzE4+XL1/O\nl770JWbOnMnkyZNZtmwZb7zxBgCbbLLJ6tOC60487tat2xrzBfr27UtE1BvBGDNmDCNGjOCiiy5i\n5MiRPP7441x77bX85Cc/abuNXwfV3m8A48eP5x/+4R/YbrvtePfdd7nkkkt46aWX6k2QPfHEE5k4\n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\n9D+jsOF2afoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x13c53ac50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "values = np.array(list(accuracies.values()))*100\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(len(langs)), values, align=\"center\", color=\"lime\")\n",
    "plt.xlim(-1,5)\n",
    "plt.ylim(0,105)\n",
    "ax.set_xticklabels([\"\"] + langs)\n",
    "ax.set_xlabel(\"language\")\n",
    "ax.set_ylabel(\"accuracy (%)\")\n",
    "\n",
    "for i, v in enumerate(values):\n",
    "    ax.text(i-0.25, v+1, \"{:.2f}\".format(v))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Known and unknown words"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "First, we get the accuracies separately for words that are:\n",
    "\n",
    "1. seen by the taggers at training time\n",
    "2. words unique to the test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "def get_accuracy_known_vs_unknown(s_data, g_data, lexicon):\n",
    "    \"\"\"\n",
    "    Separates the accuracy for known and unknown words.\n",
    "    Known = exists in the training set.\n",
    "    \"\"\"\n",
    "    correct_known = 0\n",
    "    correct_unknown = 0\n",
    "    total_known = 0\n",
    "    total_unknown = 0\n",
    "    for s_sent, g_sent in zip(s_data, g_data):\n",
    "        for (word, s_tag), (_, g_tag) in zip(s_sent, g_sent):\n",
    "            if word in lexicon:\n",
    "                total_known += 1\n",
    "                correct_known += int(s_tag == g_tag)\n",
    "            else:\n",
    "                total_unknown += 1\n",
    "                correct_unknown += int(s_tag == g_tag)\n",
    "    return correct_known/total_known, correct_unknown/total_unknown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "accuracies_ku = {lang:get_accuracy_known_vs_unknown(data[lang][2], \n",
    "                                                    data[lang][3], \n",
    "                                                    data[lang][0]) \n",
    "                 for lang in langs}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cs': (0.9825183441025079, 0.8923591144335825),\n",
       " 'de': (0.9381399317406144, 0.838021778584392),\n",
       " 'en': (0.9461847744443953, 0.7320341047503045),\n",
       " 'fr': (0.961362248014661, 0.8170212765957446),\n",
       " 'hi': (0.9565981531128984, 0.7059139784946237)}"
      ]
     },
     "execution_count": 502,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracies_ku"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Then, we plot these separately."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x1339e2278>"
      ]
     },
     "execution_count": 503,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrq6O22+/nbPOOot58+YxderUVnVUKoOGJKlqLV++nGOOOYYDDjiABx54oN19kwYPHswpp5zS/HrX\nXXflyCOP5Nlnn21uu/feexk5ciQnn3xyc1v//v0555xz2LhxI4sXLwayoJFS4uGHHwayQHHkkUdy\n3HHHNQeNDRs28MQTT1BfX9+qjojgrLPOatVWX1/Pyy+/zMaNG0twJsrHoCFJqkopJT760Y8yZMgQ\n7rvvPgYPHtyuz957792ubfjw4axfv7759erVqxkzZky7frW1taSUWL16NQB77rknY8aMaQ4VDQ0N\n1NfXU19fz/PPP8+qVatYsmQJKaV2QQNot7pm28hLy1oqkUFDklSVIoJp06axcuVKFixY0GGf/v37\nd9ieUirqmBMmTKChoYEtW7awdOlSJk6cyCGHHMKwYcNoaGhgyZIlDB48mCOOOCL3WnqLSlneKklS\nl82ePZv+/ftz9tlnM2TIkFaXPzpr3333Zfny5e3aGxsbm7dvU19fz/z58/ne977H1q1bOfroo4kI\nJkyYwMMPP0xjYyPve9/7+tTNxBzRkCRVrYjghhtuYNq0aZx22mn86Ec/6vI+jj/+eF588UVuu+22\n5ra3336buXPnsvvuuzNp0qTm9m3zNK6++mrGjRvH7rvv3ty+aNEili5d2uFlk2rmiIYkqWOrG6vi\n2BHBggULmDp1KieeeCL33HMPxx57bKfff+aZZzJv3jxmzpzJL3/5S/bbbz9uv/12Hn30Ua699loG\nDRrU3PfAAw9k5MiRPP3003zuc59rbp84cSLnn38+EWHQkCT1bSNGjGBATQ1brphR1joG1NQwYsSI\nkuxrl1124Y477mDKlClMnTqVn/70pwDbvYTRsn3AgAEsXryYCy64gFtuuYXXXnuNsWPHMn/+fE49\n9dR2762vr+eOO+5otYS1rq6Ompoatm7dylFHHVWSn6lSGDQkSa2MHj2aFY2NFf301osuuoiLLrqo\nVduAAQN46KGHml+3/L6lm266qcNavv3tb3fq2C0vsWyzyy67bHeZake1Apx++umcfvrpnTpmb2bQ\nkCS1M3r0aB9mppJwMqgkScqNQUOSJOXGoCFJknJj0JAkSbkxaEiSpNwYNCRJUm4MGpIkKTcGDUmS\nlBuDhiRJyo1BQ5Ik5cagIUnSTlx88cX069ePV155pdylVByfdSJJamfNmjUV/VC1UouI7T7pVTtm\n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\nk4DUel3CAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12d9877b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "values_known = np.array([k for k, u in list(accuracies_ku.values())])*100\n",
    "values_unknown = np.array([u for k, u in list(accuracies_ku.values())])*100\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.bar(np.arange(len(langs))-0.2, values_known, width=0.4, \n",
    "       align=\"center\", color=\"deepskyblue\", label=\"known\")\n",
    "ax.bar(np.arange(len(langs))+0.2, values_unknown, width=0.4, \n",
    "       align=\"center\", color=\"lightsalmon\", label=\"unknown\")\n",
    "\n",
    "plt.xlim(-1,5)\n",
    "plt.ylim(0,105)\n",
    "plt.legend(loc=4)\n",
    "ax.set_xticklabels([\"\"] + langs)\n",
    "ax.set_xlabel(\"language\")\n",
    "ax.set_ylabel(\"accuracy (%)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "How many unknown words are there in the test sets?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "unknowns = {}\n",
    "for lang in langs:\n",
    "    unk = sum([int(word not in data[lang][0]) \n",
    "               for sentence in data[lang][2] for word, tag in sentence])\n",
    "    total = sum([1 for sentence in data[lang][2] \n",
    "                 for word, tag in sentence])\n",
    "    unknowns[lang] = unk/total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cs': 0.15998160073597056,\n",
       " 'de': 0.13548069830341775,\n",
       " 'en': 0.09814313037934332,\n",
       " 'fr': 0.06697064690795099,\n",
       " 'hi': 0.05249788314987299}"
      ]
     },
     "execution_count": 505,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unknowns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Precision and recall\n",
    "\n",
    "How well does a tagger perform with a specific word type? Say, `NOUN`, `VERB`, or `ADJ`?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img width=\"500\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/26/Precisionrecall.svg/350px-Precisionrecall.svg.png\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "Or, in Python code..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "def get_precision_and_recall(s_data, g_data, tag):\n",
    "    \"\"\"\n",
    "    Precision and recall for a single POS tag.\n",
    "    Expressed in terms of true|false positives|negatives.\n",
    "    \"\"\"\n",
    "    true_positives = 0\n",
    "    true_negatives = 0\n",
    "    false_positives = 0\n",
    "    false_negatives = 0\n",
    "    correct = 0\n",
    "    for s_sent, g_sent in zip(s_data, g_data):\n",
    "        for (_, s_tag), (_, g_tag) in zip(s_sent, g_sent):\n",
    "            if tag == s_tag:  # system predicts tag...\n",
    "                if s_tag == g_tag:  # ...and the prediction is correct\n",
    "                    true_positives += 1\n",
    "                else:  # ...and the prediction is incorrect\n",
    "                    false_positives += 1\n",
    "            else:  # system didn't predict tag...\n",
    "                if tag == g_tag:  # ...and it should have\n",
    "                    false_negatives += 1\n",
    "                else:  # ...and it shouldn't have\n",
    "                    true_negatives += 1\n",
    "    precision = true_positives/(true_positives + false_positives)\n",
    "    recall = true_positives/(true_positives + false_negatives)\n",
    "    return precision, recall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "metadata": {
    "collapsed": false,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [],
   "source": [
    "tags = [\"ADJ\", \"NOUN\", \"PROPN\", \"VERB\"]\n",
    "\n",
    "from collections import defaultdict\n",
    "precisions = defaultdict(lambda: defaultdict())\n",
    "recalls = defaultdict(lambda: defaultdict())\n",
    "\n",
    "for lang in langs:\n",
    "    for tag in tags:\n",
    "        precision, recall = get_precision_and_recall(data[lang][3], \n",
    "                                                     data[lang][2], tag)\n",
    "        precisions[lang][tag] = round(precision * 100, 2)\n",
    "        recalls[lang][tag] = round(recall * 100, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "And now for some table views..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "metadata": {
    "collapsed": true,
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "metadata": {
    "collapsed": false,
    "scrolled": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cs</th>\n",
       "      <th>de</th>\n",
       "      <th>en</th>\n",
       "      <th>fr</th>\n",
       "      <th>hi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ADJ</th>\n",
       "      <td>96.57</td>\n",
       "      <td>77.49</td>\n",
       "      <td>88.72</td>\n",
       "      <td>88.58</td>\n",
       "      <td>87.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOUN</th>\n",
       "      <td>97.83</td>\n",
       "      <td>95.22</td>\n",
       "      <td>89.87</td>\n",
       "      <td>95.76</td>\n",
       "      <td>92.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PROPN</th>\n",
       "      <td>85.19</td>\n",
       "      <td>77.87</td>\n",
       "      <td>83.52</td>\n",
       "      <td>82.15</td>\n",
       "      <td>87.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VERB</th>\n",
       "      <td>95.75</td>\n",
       "      <td>90.59</td>\n",
       "      <td>93.83</td>\n",
       "      <td>95.46</td>\n",
       "      <td>97.12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          cs     de     en     fr     hi\n",
       "ADJ    96.57  77.49  88.72  88.58  87.90\n",
       "NOUN   97.83  95.22  89.87  95.76  92.34\n",
       "PROPN  85.19  77.87  83.52  82.15  87.64\n",
       "VERB   95.75  90.59  93.83  95.46  97.12"
      ]
     },
     "execution_count": 509,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame.from_dict(precisions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "metadata": {
    "collapsed": false,
    "scrolled": true,
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cs</th>\n",
       "      <th>de</th>\n",
       "      <th>en</th>\n",
       "      <th>fr</th>\n",
       "      <th>hi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ADJ</th>\n",
       "      <td>97.22</td>\n",
       "      <td>88.61</td>\n",
       "      <td>87.83</td>\n",
       "      <td>87.03</td>\n",
       "      <td>93.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NOUN</th>\n",
       "      <td>95.18</td>\n",
       "      <td>92.34</td>\n",
       "      <td>89.64</td>\n",
       "      <td>92.01</td>\n",
       "      <td>91.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PROPN</th>\n",
       "      <td>93.49</td>\n",
       "      <td>88.51</td>\n",
       "      <td>84.01</td>\n",
       "      <td>89.00</td>\n",
       "      <td>85.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VERB</th>\n",
       "      <td>96.88</td>\n",
       "      <td>91.20</td>\n",
       "      <td>93.74</td>\n",
       "      <td>92.61</td>\n",
       "      <td>96.29</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          cs     de     en     fr     hi\n",
       "ADJ    97.22  88.61  87.83  87.03  93.88\n",
       "NOUN   95.18  92.34  89.64  92.01  91.85\n",
       "PROPN  93.49  88.51  84.01  89.00  85.80\n",
       "VERB   96.88  91.20  93.74  92.61  96.29"
      ]
     },
     "execution_count": 510,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame.from_dict(recalls)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "# Your assignment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "<img width=\"800\" src=\"http://www.nactem.ac.uk/aNT/images/fig5-2.png\" />"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "slideshow": {
     "slide_type": "slide"
    }
   },
   "source": [
    "### Learning curves\n",
    "\n",
    "1. For each language, train TnT on $n \\in \\{10, 20, ..., 100\\}$ percent of the training data.\n",
    "2. Evaluate each of these models on test data.\n",
    "3. Plot the overall scores. Keep in mind: x-axis = number of words, y-axis = accuracy.\n",
    "4. Also plot separately for known and unknown words.\n",
    "5. Write a short abstract summarizing the results of your analysis."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Slideshow",
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}